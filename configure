#!/bin/bash
#
# Copyright 2017 DT42
#
# This file is part of BerryNet.
#
# BerryNet is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# BerryNet is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with BerryNet.  If not, see <http://www.gnu.org/licenses/>.

# One-click IoT gateway deployment script.

set -e

LOG="$PWD/berrynet-install.log"
DISTRIBUTIONID=`lsb_release -i -s`
CODENAME=`lsb_release -c -s`
INSTALL_TENSORFLOW="Y"
INSTALL_OPENVINO="N"
INSTALL_DARKNET="N"
INSTALL_CAFFE2="N"


install_opencv() {
    # OpenCV sources
    #     x86 Ubuntu 16.04: PPA
    #     Raspbian: BerryNet repo
    if [ "$DISTRIBUTIONID" = "Ubuntu" ]; then
        sudo add-apt-repository -yu ppa:timsc/opencv-3.4
    fi
    sudo apt-get install -y python3-opencv
}

install_nodejs() {
    # v10.x is LTS, if you want the latest feature, change to "setup_11.x".
    #指定发行版本
    curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
    sudo apt-get install -y nodejs
}

install_system_dependencies() {
    sudo apt-get update
    # TODO: 弄清 supervisor 文档
    if [ "$CODENAME" = "buster" ]; then
        sudo apt-get install -y \
            supervisor
    else
        sudo apt-get install -y \
            apache2 \
            curl \
            dirmngr \
            fswebcam \
            git \
            imagemagick \
            libkrb5-dev \
            libyaml-dev \
            libzmq3-dev \
            lsb-release \
            mosquitto \
            mosquitto-clients \
            python3-dev \
            python3-opengl \
            python3-pip \
            supervisor \
            wget
    fi
    sudo -H pip3 install --timeout 60 cython
    sudo -H pip3 install --timeout 60 logzero
    sudo -H pip3 install --timeout 60 paho-mqtt
    sudo -H pip3 install --timeout 60 PyOpenGL
    sudo -H pip3 install --timeout 60 PyOpenGL-accelerate
    sudo -H pip3 install --timeout 60 watchdog

    install_opencv
    install_nodejs
}

install_berrynet_repository() {
    curl -sL https://raw.githubusercontent.com/DT42/BerryNet-repo/master/setup.sh | sudo -E bash -
}

install_configs() {
    # supervisor 配置文件注意
    sudo cp config/supervisor/conf.d/berrynet-tflite.conf /etc/supervisor/conf.d/
    # 日志
    sudo mkdir -p /var/log/berrynet

    # mosquitto 服务器
    sudo cp config/etc/mosquitto/conf.d/berrynet.conf /etc/mosquitto/conf.d

    if [ "$DISTRIBUTIONID" = "Raspbian" ]; then
        # Make RPi camera to show at /dev/videoN
        # ? 模型训练
        sudo cp config/bcm2835-v4l2.conf /etc/modules-load.d
    fi
}

install_berrynet_py() {
  # TODO: 这里面是什么?
    sudo apt-get install -y berrynet
    # FIXME: Freeboard dependency
    #sudo npm install -g mime
}

install_berrynet_js() {
    local working_dir="/usr/local/berrynet"
    sudo mkdir -p $working_dir
    sudo cp -a \
        broker.js \
        camera.js \
        config.js \
        data_collector.js \
        inference \
        journal.js \
        localimg.js \
        mail.js \
        line.js \
        package.json \
        $working_dir
    # TODO: 注意这个管理文件
    sudo cp berrynet-manager /usr/local/bin
    # FIXME: image dir should be created by program
    mkdir -p /usr/local/berrynet/inference/image
    # install npm dependencies
    pushd $working_dir > /dev/null
    # 运行 package.json
    sudo npm install --unsafe-perm
    popd > /dev/null
}

install_model() {
  # TODO: 后面替换为我们的 model
    local model_name="$1"
    echo "Install model $model_name"
    sudo apt-get install -y $model_name
}


install_tensorflow() {
    if [ "$DISTRIBUTIONID" = "Ubuntu" ]; then
	sudo -H pip3 install tensorflow
    elif [ "$DISTRIBUTIONID" = "Raspbian" ]; then
        case $CODENAME in
        "buster")
            # Unsatisfied dependencies in Buster, and wheels will be installed
            #     python3-tensorboard             none
            #     python3-wrapt                   1.10.11-1+b1
            #     python3-gast                    none
            #     python3-tensorflow-estimator    none
            #     python3-astor                   0.5-1
            #     python3-absl-py                 none
            #     python3-google-pasta            none
            #     python3-setuptools              40.8.0-1
            sudo apt-get install -y \
                python3-numpy \
                python3-termcolor \
                python3-six \
                python3-keras-applications \
                python3-protobuf \
                python3-keras-preprocessing \
                python3-wheel \
                python3-grpcio \
                python3-werkzeug \
                python3-markdown \
                python3-h5py

	    TENSORFLOW_PKGNAME="tensorflow-1.15.0-cp37-cp37m-linux_armv7l.whl"
	    if [ ! -e "/tmp/$TENSORFLOW_PKGNAME" ]; then
                wget -O /tmp/$TENSORFLOW_PKGNAME \
                    https://s3.amazonaws.com/pypi.berrynet.org/$TENSORFLOW_PKGNAME
	    else
                echo "$TENSORFLOW_PKGNAME has existed, skip to download it."
	    fi
	    sudo -H pip3 install /tmp/$TENSORFLOW_PKGNAME
            ;;
        *)
            echo "ERROR: Fail to install TensorFlow, unknown or unsupported Raspbian codename $CODENAME"
            exit 1
        esac
    fi
}

install_openvino_repository() {
    echo 'Adding the OpenVINO GPG key to your keyring...'
    curl -sL https://apt.repos.intel.com/openvino/2020/GPG-PUB-KEY-INTEL-OPENVINO-2020 | sudo apt-key add -
    sudo curl -sL -o /etc/apt/sources.list.d/intel-openvino-2020.list \
        https://raw.githubusercontent.com/DT42/BerryNet/master/config/intel-openvino-2020.list
    sudo apt-get update
}

install_openvino() {
    if [ "$DISTRIBUTIONID" = "Ubuntu" ]; then
        let OPENVINO_VERSION="2020.1.023"
        if [ "$CODENAME" = "xenial" ]; then
            sudo apt-get install intel-openvino-runtime-ubuntu16-$OPENVINO_VERSION
        elif [ "$CODENAMe" = "bionic" ]; then
            sudo apt-get install intel-openvino-runtime-ubuntu18-$OPENVINO_VERSION
        else
            echo "ERROR: OpenVINO on Ubuntu $CODENAME is not supported by Intel."
        fi
    elif [ "$DISTRIBUTIONID" = "Raspbian" ]; then
        sudo apt-get install -y openvino-rpi
    fi
}

update_system_service() {
    sudo service mosquitto restart
    sudo supervisorctl reload
    # TODO: ?
    sudo a2enconf berrynet-dashboard
}

# run shell
install_system_dependencies 2>&1 | tee -a $LOG
install_berrynet_repository 2>&1 | tee -a $LOG
install_berrynet_py 2>&1 | tee -a $LOG
install_configs 2>&1 | tee -a $LOG
# FIXME: Raspbian 20190408 breaks some dependencies of BerryNet JS.
#        Disable temporaily before this issue is fixed.
#install_berrynet_js 2>&1 | tee -a $LOG

if [ "$INSTALL_TENSORFLOW" = "Y" ]; then
    install_tensorflow 2>&1 | tee -a $LOG
    #install_model inception
    install_model mobilenet-1.0-224-quantized-tflite 2>&1 | tee -a $LOG
    install_model mobilenet-ssd-coco-tflite 2>&1 | tee -a $LOG
else
    echo "Not install TensorFlow" >> $LOG
fi

if [ "$INSTALL_OPENVINO" = "Y" ]; then
    install_openvino_repository 2>&1 | tee -a $LOG
    install_openvino 2>&1 | tee -a $LOG
    install_model mobilenet-1.0-224-fp16-openvino 2>&1 | tee -a $LOG
    install_model mobilenet-ssd-openvino 2>&1 | tee -a $LOG
else
    echo "Not install OpenVINO" >> $LOG
fi

if [ "$INSTALL_DARKNET" = "Y" ]; then
    install_darknet 2>&1 | tee -a $LOG
    install_model tinyyolovoc 2>&1 | tee -a $LOG
else
    echo "Not install Darknet NNPACK" >> $LOG
fi

if [ "$INSTALL_CAFFE2" = "Y" ]; then
    install_caffe2 2>&1 | tee -a $LOG
    download_classifier_model_caffe2 2>&1 | tee -a $LOG
else
    echo "Not install Caffe2" >> $LOG
fi

update_system_service 2>&1 | tee -a $LOG

{
    echo "Installation is completed successfully!"
    echo ""
    echo "If there is any issue, please open an issue on"
    echo ""
    echo "    https://github.com/DT42/BerryNet/issues"
    echo ""
    echo "and attach these logs:"
    echo ""
    echo "    $LOG"
    echo "    /usr/local/berrynet/npm-debug.log"
    echo ""
    echo "We are happy to check and fix it, thank you!"
} | tee -a $LOG

# 关键点 supervisor